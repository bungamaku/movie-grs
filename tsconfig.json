{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "RootConfig": [
        "src/apps/Root/index"
      ]
    },
    // "sourceMap" is needed for debugging purpose.
    // Without this, the mapping will still be generated from the JS file generated by TS compiler.
    // However, the JS file generated by TS compiler doesn't preserve the empty newline.
    // The empty newline is preserved inside mapping file produced by TS compiler (which is configured with this "sourceMap" key).
    // The mapping file from TS compiler will be used by webpack so when there's an error, we can debug it all the way to the .ts or .tsx file.
    "sourceMap": true,
    // "module" specifies module code generation. "esNext" will produce "import", "commonjs" will produce "require".
    // "esNext" is required for webpack's tree-shaking feature to work (tree-shaking will not work with "require" syntax).
    // Why "esNext" and nost just "es6"? Because we need `Dynamic Import` and it is only supported when '--module' flag is 'commonjs' or 'esNext'.
    "module": "esNext",
    "target": "esNext",
    "jsx": "react",
    //strict: true === noImplicitAny, noImplicitThis, alwaysStrict, strictBindCallApply, strictNullChecks, strictFunctionTypes, strictPropertyInitialization.
    "strict": true,
    "noUnusedLocals": false, //To warn us with unused imports.
    "noUnusedParameters": false, //To warn us with unused parameters.
    "forceConsistentCasingInFileNames": true,
    "noImplicitReturns": true,
    "allowSyntheticDefaultImports": true,
    "lib": [
      "dom", // Needed so we can access "window" object.
      "es2015" // "A dynamic import call in ES5/ES3 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your `--lib` option.."
    ]
  },
  "include": [
    "./src/**/*"
  ],
  // Need to exclude test file because we use react-testing-library in most of them.
  // TypeScript can't find module for react-testing-library because we use "module": "esNext", resulting in error.
  // To fix it, we need "module": "commonjs". However, it will break tree-shaking feature.
  // So the ultimate fix is to exclude them.
  // However, with "module": "esNext", ts-jest will give warning, hence we still need tsconfig.test.json.
  "exclude": [
    "./src/**/*.test.tsx",
    "./src/**/*.test.ts"
  ]
}
